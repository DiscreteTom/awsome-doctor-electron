title: Ping is not working
data: # define data that this workflow need to use
  instanceId: ""
  securityGroupIds: []
input: # define user input
  - label: Instance ID
    placeholder: i-01234567891234567
    store: instanceId # store value in data
steps:
  - name: Retrieve security groups
    js: | # write a function body
      let res;
      try {
        res = await $.aws.ec2.send(
          new $.ec2.DescribeInstancesCommand({ InstanceIds: [$.data.instanceId] })
        );
      } catch (e) {
        $.err = e;
        return;
      }
      $.data.securityGroupIds = $.jp.query(res, "$..SecurityGroups[*].GroupId");
      if ($.data.securityGroupIds.length != 0) {
        $.ok = "Got security groups: " + $.data.securityGroupIds.join(", ");
      } else {
        $.err =
          "No security groups associated with this instance, which is abnormal.";
      }
  - name: Check security group inbound rules
    js: |
      let res;
      try {
        res = await $.aws.ec2.send(
          new $.ec2.DescribeSecurityGroupsCommand({
            GroupIds: $.data.securityGroupIds,
          })
        );
      } catch (e) {
        $.err = e;
        return;
      }
      // check `all traffic`
      let anyTrafficCidr = $.jp.query(
        res,
        "$..IpPermissions[?(@.IpProtocol=='-1')]..CidrIp"
      );
      let maybeAll = false;
      if (anyTrafficCidr.length != 0) {
        if (anyTrafficCidr[0] == "0.0.0.0/0") {
          $.ok =
            "The security group's inbound rules allow all traffic from 0.0.0.0/0.";
          return;
        } else {
          $.info +=
            "All traffic from those CIDRs are allowed to access this instance: " +
            pingCidr.join(", ") +
            ".\n";
          maybeAll = true;
        }
      }
      // check `all icmp` or `icmp echo request`
      let pingCidr = $.jp.query(
        res,
        // allow echo request, or allow all icmp
        "$..IpPermissions[?(@.IpProtocol=='icmp' && (@.FromPort==8 || @.FromPort==-1))]..CidrIp"
      );
      if (pingCidr.length == 0) {
        if (!maybeAll) {
          $.err =
            "No IP is allowed to ping this instance, please fix your security group rules.";
        }
      } else if (pingCidr.indexOf("0.0.0.0/0") != -1) {
        $.ok = "The security group's inbound rules allow ping from 0.0.0.0/0";
      } else {
        $.info +=
          "Those CIDRs are allowed to ping your instance: " +
          pingCidr.join(", ") +
          ".\n";
      }
  - name: Check security group outbound rules
    js: |
    let res;
    try {
      res = await $.aws.ec2.send(
        new $.ec2.DescribeSecurityGroupsCommand({
          GroupIds: $.data.securityGroupIds,
        })
      );
    } catch (e) {
      $.err = e;
      return;
    }
    // check `all traffic`
    let anyTrafficCidr = $.jp.query(
      res,
      "$..IpPermissionsEgress[?(@.IpProtocol=='-1')]..CidrIp"
    );
    let maybeAll = false;
    if (anyTrafficCidr.length != 0) {
      if (anyTrafficCidr[0] == "0.0.0.0/0") {
        $.ok =
          "The security group's outbound rules allow all traffic to 0.0.0.0/0.";
        return;
      } else {
        $.info +=
          "All traffic to those CIDRs are allowed to access this instance: " +
          pingCidr.join(", ") +
          ".\n";
        maybeAll = true;
      }
    }
    // check `all icmp` or `icmp echo request`
    let pingCidr = $.jp.query(
      res,
      // allow echo reply, or allow all icmp
      "$..IpPermissionsEgress[?(@.IpProtocol=='icmp' && (@.FromPort==0 || @.FromPort==-1))]..CidrIp"
    );
    if (pingCidr.length == 0) {
      if (!maybeAll) {
        $.err =
          "No IP is allowed to ping this instance, please fix your security group rules.";
      }
    } else if (pingCidr.indexOf("0.0.0.0/0") != -1) {
      $.ok = "The security group's outbound rules allow ping to 0.0.0.0/0";
    } else {
      $.info +=
        "Those CIDRs are allowed to ping your instance: " +
        pingCidr.join(", ") +
        ".\n";
    }

