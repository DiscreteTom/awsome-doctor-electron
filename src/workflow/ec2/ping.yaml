title: Can't ping EC2 instance from the Internet.
data:
  instanceId: ''
  securityGroupIds: []
  vpcId: ''
  subnetId: ''
input:
  - label: Instance ID
    placeholder: i-01234567891234567
    store: instanceId
steps:
  - name: Retrieve instance info, check public IP.
    js: |
      let res;
      try {
        res = await $.aws.ec2.send(
          new $.ec2.DescribeInstancesCommand({ InstanceIds: [$.data.instanceId] })
        );
      } catch (e) {
        $.err = e;
        return;
      }

      let publicIps = $.jp.query(res, "$..PrivateIpAddresses..PublicIp");
      if (publicIps.length === 0) {
        $.err = "No public IP is associated to this instance.";
        return;
      }
      $.ok += `Public IP address: ${publicIps.join(", ")}. `;

      $.data.securityGroupIds = $.jp.query(res, "$..SecurityGroups[*].GroupId");
      $.data.vpcId = $.jp.query(res, "$..VpcId")[0];
      $.data.subnetId = $.jp.query(res, "$..SubnetId")[0];

      if ($.data.securityGroupIds.length !== 0) {
        $.ok += `Security groups: ${$.data.securityGroupIds.join(", ")}. `;
      } else {
        $.err +=
          "No security groups associated with this instance, which is abnormal. ";
      }
      if ($.data.vpcId && $.data.subnetId) {
        $.ok += `VPC=${$.data.vpcId}, subnet=${$.data.subnetId}. `;
      } else {
        $.err += "Failed to retrieve VPC id and subnet id. ";
      }
  - name: Check security group inbound rules.
    js: |-
      let res;
      try {
        res = await $.aws.ec2.send(
          new $.ec2.DescribeSecurityGroupsCommand({
            GroupIds: $.data.securityGroupIds,
          })
        );
      } catch (e) {
        $.err = e;
        return;
      }

      // check `all traffic`
      let maybeAllowAll = false;
      let anyTrafficCidr = $.jp.query(
        res,
        "$..IpPermissions[?(@.IpProtocol=='-1')]..CidrIp"
      );
      if (anyTrafficCidr.length !== 0) {
        if (anyTrafficCidr.indexOf("0.0.0.0/0" != -1)) {
          $.ok =
            "The security group's inbound rules allow all traffic from 0.0.0.0/0.";
          return;
        } else {
          // not sure if it's ok, need more information
          $.info += `All traffic from those CIDRs are allowed to access this instance: ${anyTrafficCidr.join(
            ", "
          )}. `;
          maybeAllowAll = true;
        }
      }

      // check `all icmp` or `icmp echo request`
      let pingCidr = $.jp.query(
        res,
        // allow echo request, or allow all icmp
        "$..IpPermissions[?(@.IpProtocol=='icmp' && (@.FromPort==8 || @.FromPort==-1))]..CidrIp"
      );
      if (pingCidr.length === 0) {
        if (!maybeAllowAll) {
          $.err +=
            "No IP is allowed to ping this instance, please fix your security group inbound rules. ";
        }
      } else if (pingCidr.indexOf("0.0.0.0/0") != -1) {
        $.ok = "The security group's inbound rules allow ping from 0.0.0.0/0";
      } else {
        // not sure if it's ok, need more information
        $.info += `Those CIDRs are allowed to ping your instance: ${pingCidr.join(
          ", "
        )}. `;
      }
  - name: Check security group outbound rules.
    js: |
      let res;
      try {
        res = await $.aws.ec2.send(
          new $.ec2.DescribeSecurityGroupsCommand({
            GroupIds: $.data.securityGroupIds,
          })
        );
      } catch (e) {
        $.err = e;
        return;
      }

      // check `all traffic`
      let anyTrafficCidr = $.jp.query(
        res,
        "$..IpPermissionsEgress[?(@.IpProtocol=='-1')]..CidrIp"
      );
      let maybeAllowAll = false;
      if (anyTrafficCidr.length !== 0) {
        if (anyTrafficCidr.indexOf("0.0.0.0/0") != -1) {
          $.ok =
            "The security group's outbound rules allow all traffic to 0.0.0.0/0.";
          return;
        } else {
          $.info += `All traffic to those CIDRs are allowed to access this instance: ${anyTrafficCidr.join(
            ", "
          )}. `;
          maybeAllowAll = true;
        }
      }

      // check `all icmp` or `icmp echo reply`
      let pingCidr = $.jp.query(
        res,
        // allow echo reply, or allow all icmp
        "$..IpPermissionsEgress[?(@.IpProtocol=='icmp' && (@.FromPort==0 || @.FromPort==-1))]..CidrIp"
      );
      if (pingCidr.length === 0) {
        if (!maybeAllowAll) {
          $.err =
            "No IP is allowed to ping this instance, please fix your security group outbound rules.";
        }
      } else if (pingCidr.indexOf("0.0.0.0/0") != -1) {
        $.ok += "The security group's outbound rules allow ping to 0.0.0.0/0. ";
      } else {
        $.info += `Those CIDRs are allowed to ping your instance: ${pingCidr.join(
          ", "
        )}. `;
      }
