title: Can't access RDS instance from the Internet.
data:
  dbIdentifier: ''
  securityGroupIds: []
  subnets: []
  vpc: ''
  port: 3306
input:
  - label: DB Identifier
    placeholder: ''
    store: dbIdentifier
steps:
  - name: Retrieve database instance info & public accessibility.
    js: |
      try {
        let res = await $.aws.rds.describeDBInstances({
          DBInstanceIdentifier: $.data.dbIdentifier,
        });
        if (res.DBInstances.length === 0) {
          $.err = `Database ${$.data.dbIdentifier} not found. Please check the identifier, your AWS profile, and the selected region. `;
          return;
        }

        $.data.port = $.jp.query(res, "$..Port")[0];
        let username = $.jp.query(res, "$..MasterUsername")[0];
        let publiclyAccessible = $.jp.query(res, "$..PubliclyAccessible")[0];
        $.data.securityGroupIds = $.jp.query(
          res,
          "$..VpcSecurityGroups[?(@.Status=='active')].VpcSecurityGroupId"
        );
        $.data.subnets = $.jp.query(
          res,
          "$..Subnets[?(@.SubnetStatus=='Active')].SubnetIdentifier"
        );
        $.data.vpc = $.jp.query(res, "$..VpcId")[0];

        if (!publiclyAccessible) {
          $.err = `Database is not public accessible. Please modify your database to enable "Public access" `;
          return;
        }

        $.ok = `Got database username: ${username}, port: ${
          $.data.port
        }, active security groups: ${$.data.securityGroupIds.join(
          ", "
        )}, active subnets: ${$.data.subnets.join(", ")}, vpc: ${$.data.vpc} `;
      } catch (e) {
        $.err = e;
        return;
      }
  - name: Check subnets' route table.
    js: |
      let mainRouteTableId;
      let mainRouteTableIgwCidr;
      let routeTableIgwCidrMap = {};

      for (let i = 0; i < $.data.subnets.length; ++i) {
        let subnet = $.data.subnets[i];
        let routeTableId;
        let igwCidr;
        try {
          let res;
          // find route table by subnet id
          res = await $.aws.ec2.describeRouteTables({
            Filters: [{ Name: "association.subnet-id", Values: [subnet] }],
          });
          if (res.RouteTables.length !== 0) {
            // explicitly associated a route table
            routeTableId = res.RouteTables[0].RouteTableId;
            igwCidr = $.jp.query(
              res,
              "$..Routes[?(@.GatewayId.startsWith('igw-'))].DestinationCidrBlock"
            );
          } else {
            // use VPC main route table
            if (!mainRouteTableId) {
              res = await $.aws.ec2.describeRouteTables({
                Filters: [{ Name: "vpc-id", Values: [$.data.vpc] }],
              });
              mainRouteTableId = $.jp.query(
                res,
                "$..Associations[?(@.Main)].RouteTableId"
              );
              mainRouteTableIgwCidr = $.jp.query(
                res,
                `$..RouteTables[?(@.RouteTableId=='${mainRouteTableId}')].Routes[?(@.GatewayId.startsWith('igw-'))].DestinationCidrBlock`
              );
            }
            routeTableId = mainRouteTableId;
            igwCidr = mainRouteTableIgwCidr;
          }
        } catch (e) {
          $.err = r;
          return;
        }
        routeTableIgwCidrMap[routeTableId] = igwCidr;
      }

      let routeTableIds = Object.keys(routeTableIgwCidrMap);
      for (let i = 0; i < routeTableIds.length; ++i) {
        let igwCidr = routeTableIgwCidrMap[routeTableIds[i]];
        if (igwCidr.length !== 0) {
          if (igwCidr.indexOf("0.0.0.0/0") == -1) {
            $.info += `Route table ${
              routeTableIds[i]
            } can access internet gateway when destination belongs to ${igwCidr.join(
              ", "
            )}. `;
          }
        } else {
          // no igw route
          $.err += `No route of the route table ${routeTableIds[i]} has Internet Gateway as target. `;
        }
      }
  - name: Check security groups' inbound rules.
    js: |
      let result = await $.utils.securityGroup.checkPort({
        $,
        direction: "in",
        securityGroupIds: $.data.securityGroupIds,
        protocol: "tcp",
        port: $.data.port,
      });

      if (result.err) {
        $.err = result.err;
        return;
      }

      if (result.portPeer.type == "no" && result.anyTrafficPeer.type == "no") {
        $.err +=
          "No IP is allowed to access this database, please fix your security group inbound rules. ";
        return;
      }

      if (result.anyTrafficPeer.type == "any") {
        $.ok = "All traffic from 0.0.0.0/0 are allowed.";
        return;
      } else if (result.anyTrafficPeer.type == "cidr") {
        $.info += `All traffic from those CIDRs are allowed: ${result.anyTrafficPeer.cidr.join(
          ", "
        )}. `;
      }

      if (result.portPeer.type == "any") {
        $.ok = "Traffic is allowed from 0.0.0.0/0";
        return;
      } else if (result.portPeer.type == "cidr") {
        $.info += `Traffic is allowed from those CIDRs: ${result.portPeer.cidr.join(
          ", "
        )}. `;
      }
  - name: Check network ACL.
    js: |
      let inboundRules = [];
      let outboundRules = [];

      for (let i = 0; i < $.data.subnets.length; ++i) {
        let subnet = $.data.subnets[i];
        try {
          let res = await $.aws.ec2.describeNetworkAcls({
            Filters: [{ Name: "association.subnet-id", Values: [subnet] }],
          });
          inboundRules = $.jp.query(res, "$..Entries[?(!@.Egress)]");
          outboundRules = $.jp.query(res, "$..Entries[?(@.Egress)]");
        } catch (e) {
          $.err = e;
          return;
        }

        // sort rules by rule number ascent
        inboundRules.sort((a, b) => a.RuleNumber - b.RuleNumber);
        outboundRules.sort((a, b) => a.RuleNumber - b.RuleNumber);

        if (inboundRules.length === 0) {
          $.err = `No inbound rules found for subnet ${subnet}.`;
          return;
        }
        if (outboundRules.length === 0) {
          $.err = `No outbound rules found for subnet ${subnet}.`;
          return;
        }

        // use the first rule
        let rIn = inboundRules[0];
        let rOut = outboundRules[0];
        let inNotModified = false;
        let outNotModified = false;

        if (
          rIn.Protocol == "-1" &&
          rIn.RuleAction == "allow" &&
          rIn.CidrBlock == "0.0.0.0/0"
        ) {
          inNotModified = true;
        }
        if (
          rOut.Protocol == "-1" &&
          rOut.RuleAction == "allow" &&
          rOut.CidrBlock == "0.0.0.0/0"
        ) {
          outNotModified = true;
        }

        if (inNotModified) {
          if (!outNotModified) {
            $.info += `Outbound ACLs are modified. Rules: ${outboundRules}. `;
          }
        } else {
          if (outNotModified) {
            $.info += `Inbound ACLs are modified. Rules: ${inboundRules}. `;
          } else {
            $.info += `Inbound & Outbound ACLs are modified. Inbound rules: ${inboundRules}. Outbound rules: ${outboundRules}. `;
          }
        }
      }

      if ($.info.length === 0) {
        $.ok = "All traffics are allowed. ";
      }
